(def fib
 (fn [n]
  (if (<= n 2)
   1
   (+ (fib (- n 1)) (fib (- n 2)))))
 )

(def
 dump (fn [m]
     (let [f (first m)]
      (if f
       (do 
        (println f)
        (dump (rest m)))
       (println "done")))))

(def map-lo (fn [f coll res]
    (if coll
        (let [fst (first coll)
              rst (rest coll)]
              (map-lo f coll (conj res (f fst))))
        res)))

(def map (fn 
          [f coll] (map-lo f coll (list))))

{ :map map }

