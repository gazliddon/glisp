(def fib
  (fn [n]
    (if (<= n 2)
      1
      (+ (fib (- n 1)) (fib (- n 2))))))

(def doc 
  (fn "get the docstring for object o"
    [o]
    (let [m (meta o)]
      (println "Getting docs")
      (if m
        (:docstring m)
        nil))))

(def loop-test 
  (fn "test the loops"
    [o]
    (println o)
    (if o
      (loop-test (rest o))
      "done")))

(def assert (fn [v]
              (if v 
                v
                (throw "fucked" ))))

(def ff 
  (fn [sym res]
    (let [cnt (first res)
          data (second res)
          elem (list sym (list  'nth 'ARG0 cnt) )
          ret [ (inc cnt) (conj data elem)]]
      ret)))

(def d
  (fn
    [args v]
    (assert (= (type args) "vector"))
    (let [res (reduce ff args [0 '() ])]
      (second res))))

(def test (fn [] (d '[x y] 'a)))

(test)


